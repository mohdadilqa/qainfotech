"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.convertTo = convertTo;
exports.defaultArgs = void 0;

var _child_process = require("child_process");

var _path = require("path");

var _unpack = require("./unpack");

var _cleanup = require("./cleanup");

var _logs = require("./logs");

const defaultArgs = ['--headless', '--invisible', '--nodefault', '--view', '--nolockcheck', '--nologo', '--norestore', '--nofirststartwizard'];
exports.defaultArgs = defaultArgs;
const INPUT_PATH = '/opt/lo.tar.br';
const OUTPUT_PATH = '/tmp/instdir/program/soffice.bin';
const UNOPKG_OUTPUT_PATH = '/tmp/instdir/program/unopkg.bin';

/**
 * Converts a file in /tmp to the desired file format
 * @param {String} filename Name of the file to convert located in /tmp directory
 * @param {String} format File format to convert incoming file to
 * @param {ExtensionOptions} options LibreOffice extensions to be enabled during file conversion
 * @return {Promise<String>} Absolute path to the converted file
 */
async function convertTo(filename, format, options) {
  let logs;
  (0, _cleanup.cleanupTempFiles)();
  await (0, _unpack.unpack)({
    inputPath: INPUT_PATH
  });

  if (options && options.extensions && options.extensions.length) {
    const {
      extensions,
      shouldThrowOnExtensionFail = true
    } = options;
    const enabledExtensions = (0, _child_process.execSync)(`${UNOPKG_OUTPUT_PATH} list --shared`).toString();
    extensions.forEach(extension => {
      enableExtension(enabledExtensions, extension, shouldThrowOnExtensionFail);
    });
  }

  const cmd = `cd /tmp && ${OUTPUT_PATH} ${defaultArgs.join(' ')} --convert-to ${format} --outdir /tmp /tmp/${filename}`; // due to unknown issue, we need to run command twice

  try {
    logs = (0, _child_process.execSync)(cmd);
  } catch (e) {
    logs = (0, _child_process.execSync)(cmd);
  }

  (0, _child_process.execSync)(`rm /tmp/${filename}`);
  (0, _cleanup.cleanupTempFiles)();
  return (0, _logs.getConvertedFilePath)(logs.toString('utf8'));
}

function enableExtension(enabledExtensions, extension, shouldThrowOnExtensionFail) {
  if (!enabledExtensions.includes((0, _path.basename)(extension))) {
    try {
      (0, _child_process.execSync)(`${UNOPKG_OUTPUT_PATH} add --shared ${extension}`);
    } catch (e) {
      if (shouldThrowOnExtensionFail) {
        throw e;
      }
    }
  }
}